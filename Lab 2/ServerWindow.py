# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QTextCursor
import socket
import sys
import threading


class Ui_ChatWindow(object):
    def setupUi(self, ChatWindow):
        ChatWindow.setObjectName("ChatWindow")
        ChatWindow.resize(912, 596)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        ChatWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(ChatWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.AllText = QtWidgets.QTextEdit(self.centralwidget)
        self.AllText.setGeometry(QtCore.QRect(10, 70, 891, 371))
        self.AllText.setObjectName("AllText")
        self.SendText = QtWidgets.QTextEdit(self.centralwidget)
        self.SendText.setGeometry(QtCore.QRect(20, 460, 721, 121))
        self.SendText.setObjectName("SendText")
        self.SendButton = QtWidgets.QPushButton(self.centralwidget)
        self.SendButton.setGeometry(QtCore.QRect(760, 490, 131, 51))
        self.SendButton.setObjectName("SendButton")
        self.ConnectButton = QtWidgets.QPushButton(self.centralwidget)
        self.ConnectButton.setGeometry(QtCore.QRect(620, 10, 131, 51))
        self.ConnectButton.setObjectName("ConnectButton")
        self.StopButton = QtWidgets.QPushButton(self.centralwidget)
        self.StopButton.setGeometry(QtCore.QRect(770, 10, 131, 51))
        self.StopButton.setObjectName("StopButton")
        self.IPText = QtWidgets.QLineEdit(self.centralwidget)
        self.IPText.setGeometry(QtCore.QRect(60, 20, 261, 41))
        self.IPText.setObjectName("IPText")
        self.IPLabel = QtWidgets.QLabel(self.centralwidget)
        self.IPLabel.setGeometry(QtCore.QRect(20, 30, 31, 21))
        self.IPLabel.setObjectName("IPLabel")
        self.PortText = QtWidgets.QLineEdit(self.centralwidget)
        self.PortText.setGeometry(QtCore.QRect(410, 20, 131, 41))
        self.PortText.setObjectName("PortText")
        self.PortLabel = QtWidgets.QLabel(self.centralwidget)
        self.PortLabel.setGeometry(QtCore.QRect(350, 30, 71, 21))
        self.PortLabel.setObjectName("PortLabel")
        ChatWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(ChatWindow)
        QtCore.QMetaObject.connectSlotsByName(ChatWindow)

        self.ClientSocketList = list()
        self.State = 0
        self.link = False  # 用于标记是否开启了连接
        self.AllText.setReadOnly(True)
        self.ConnectButton.clicked.connect(self.TCPServerStart)
        self.SendButton.clicked.connect(self.TCPSend)

    def retranslateUi(self, ChatWindow):
        _translate = QtCore.QCoreApplication.translate
        ChatWindow.setWindowTitle(_translate("ChatWindow", "ServerWindow"))
        self.SendButton.setText(_translate("ChatWindow", "Send"))
        self.ConnectButton.setText(_translate("ChatWindow", "Connect"))
        self.StopButton.setText(_translate("ChatWindow", "Stop"))
        self.IPLabel.setText(_translate("ChatWindow", "IP"))
        self.PortLabel.setText(_translate("ChatWindow", "Port"))

    # 功能函数，TCP服务端开启
    def TCPServerStart(self):
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # 取消主动断开连接四次握手后的TIME_WAIT状态
        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # 设定套接字为非阻塞式
        self.s.setblocking(False)
        try:
            self.port = int(self.PortText.text())
            self.host = socket.gethostname()
            self.s.bind((self.host, self.port))
        except Exception as ret:
            msg = '请检查端口号\n'
            self.AllText.moveCursor(QTextCursor.End)
            self.AllText.insertPlainText(msg)
        else:
            self.s.listen()
            self.sever_th = threading.Thread(target=self.TCPServerConcurrency)
            self.sever_th.start()
            self.link = True
            msg = 'TCP服务端正在监听端口:%s\n' % str(self.port)
            self.AllText.moveCursor(QTextCursor.End)
            self.AllText.insertPlainText(msg)

    # 功能函数，供创建线程的方法；
    # 使用子线程用于监听并创建连接，使主线程可以继续运行，以免无响应
    # 使用非阻塞式并发用于接收客户端消息，减少系统资源浪费，使软件轻量化

    def TCPServerConcurrency(self):
        while True:
            try:
                ClientSocket, ClientAddress = self.s.accept()
            except Exception:
                pass
            else:
                ClientSocket.setblocking(False)
                # 将创建的客户端套接字存入列表,client_address为ip和端口的元组
                self.ClientSocketList.append((ClientSocket, ClientAddress))
                self.AllText.moveCursor(QTextCursor.End)
                msg = 'TCP服务端已连接IP:%s端口:%s\n' % ClientAddress
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
            # 轮询客户端套接字列表，接收数据
            for client, address in self.ClientSocketList:
                try:
                    ReceiveMsg = client.recv(1024)
                except Exception:
                    pass
                else:
                    if ReceiveMsg:
                        msg = ReceiveMsg.decode('utf-8')
                        msg = '来自IP:{}端口:{}:\n{}\n'.format(address[0], address[1], msg)
                        self.AllText.moveCursor(QTextCursor.End)
                        self.AllText.insertPlainText(msg)
                    else:
                        client.close()
                        self.ClientSocketList.remove((client, address))

    def TCPSend(self):
        if self.link is False:
            msg = '请选择服务，并点击连接网络\n'
            self.AllText.moveCursor(QTextCursor.End)
            self.AllText.insertPlainText(msg)
        else:
            try:
                send_msg = (str(self.SendText.toPlainText())).encode('utf-8')
                if self.State == 0:
                    # 向所有连接的客户端发送消息
                    for client, address in self.ClientSocketList:
                        client.send(send_msg)
                    msg = 'TCP服务端已发送\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
                    self.SendText.clear()
                if self.State == 1:
                    self.tcp_socket.send(send_msg)
                    msg = 'TCP客户端已发送\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
                    self.SendText.clear()
            except Exception as ret:
                msg = '发送失败\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)


def TCPClose(self):
    if self.State == 0:
        try:
            for client, address in self.ClientSocketList:
                client.close()
            self.s.close()
            if self.link is True:
                msg = '已断开网络\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
        except Exception as ret:
            pass
    if self.State == 1:
        try:
            self.s.close()
            if self.link is True:
                msg = '已断开网络\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
        except Exception as ret:
            pass
    try:
        threading.Thread._Thread__stop(self.sever_th)
    except Exception:
        pass
    try:
        threading.Thread._Thread__stop(self.client_th)
    except Exception:
        pass


class ServerUI(QMainWindow, Ui_ChatWindow):
    def __init__(self, parent=None):  # 构造方法
        super(ServerUI, self).__init__(parent)  # 运行父类的构造方法
        self.setupUi(self)  # 传递自己


if __name__ == '__main__':
    app = QApplication(sys.argv)  # 创建GUI
    Server = ServerUI()  # 创建PyQt设计的窗体对象
    Server.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程
