# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QTextCursor
import socket
import threading


class Ui_ChatWindow(object):
    def setupUi(self, ChatWindow):
        ChatWindow.setObjectName("ChatWindow")
        ChatWindow.resize(912, 596)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        ChatWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(ChatWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.AllText = QtWidgets.QTextEdit(self.centralwidget)
        self.AllText.setGeometry(QtCore.QRect(10, 70, 891, 371))
        self.AllText.setObjectName("AllText")
        self.SendText = QtWidgets.QTextEdit(self.centralwidget)
        self.SendText.setGeometry(QtCore.QRect(20, 460, 721, 121))
        self.SendText.setObjectName("SendText")
        self.SendButton = QtWidgets.QPushButton(self.centralwidget)
        self.SendButton.setGeometry(QtCore.QRect(760, 490, 131, 51))
        self.SendButton.setObjectName("SendButton")
        self.ConnectButton = QtWidgets.QPushButton(self.centralwidget)
        self.ConnectButton.setGeometry(QtCore.QRect(620, 10, 131, 51))
        self.ConnectButton.setObjectName("ConnectButton")
        self.StopButton = QtWidgets.QPushButton(self.centralwidget)
        self.StopButton.setGeometry(QtCore.QRect(770, 10, 131, 51))
        self.StopButton.setObjectName("StopButton")
        self.IPText = QtWidgets.QLineEdit(self.centralwidget)
        self.IPText.setGeometry(QtCore.QRect(60, 20, 261, 41))
        self.IPText.setObjectName("IPText")
        self.IPLabel = QtWidgets.QLabel(self.centralwidget)
        self.IPLabel.setGeometry(QtCore.QRect(20, 30, 31, 21))
        self.IPLabel.setObjectName("IPLabel")
        self.PortText = QtWidgets.QLineEdit(self.centralwidget)
        self.PortText.setGeometry(QtCore.QRect(410, 20, 131, 41))
        self.PortText.setObjectName("PortText")
        self.PortLabel = QtWidgets.QLabel(self.centralwidget)
        self.PortLabel.setGeometry(QtCore.QRect(350, 30, 71, 21))
        self.PortLabel.setObjectName("PortLabel")
        self.AllText.setReadOnly(True)
        ChatWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(ChatWindow)
        QtCore.QMetaObject.connectSlotsByName(ChatWindow)

        self.ClientSocketList = list()
        self.State = 1
        self.link = False  # 用于标记是否开启了连接
        self.ConnectButton.clicked.connect(self.TCPClientStart)
        self.SendButton.clicked.connect(self.TCPSend)

    def retranslateUi(self, ChatWindow):
        _translate = QtCore.QCoreApplication.translate
        ChatWindow.setWindowTitle(_translate("ChatWindow", "ClientWindow"))
        self.SendButton.setText(_translate("ChatWindow", "Send"))
        self.ConnectButton.setText(_translate("ChatWindow", "Connect"))
        self.StopButton.setText(_translate("ChatWindow", "Stop"))
        self.IPLabel.setText(_translate("ChatWindow", "IP"))
        self.PortLabel.setText(_translate("ChatWindow", "Port"))

    # 功能函数，TCP服务端开启
    def TCPClientStart(self):
        self.host = socket.gethostname()
        self.port = self.PortText.text()
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            address = (str(self.host), int(self.PortText.text()))
        except Exception as ret:
            msg = '请检查目标IP，目标端口\n'
            self.AllText.moveCursor(QTextCursor.End)
            self.AllText.insertPlainText(msg)
        else:
            try:
                msg = '正在连接目标服务器\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
                self.s.connect(address)
            except Exception as ret:
                msg = '无法连接目标服务器\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
            else:
                self.client_th = threading.Thread(target=self.TCPClientConcurrency)
                self.client_th.start()
                self.link = True
                msg = 'TCP客户端已连接IP:%s端口:%s\n' % address
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)

    # 功能函数，供创建线程的方法；
    # 使用子线程用于监听并创建连接，使主线程可以继续运行，以免无响应
    # 使用非阻塞式并发用于接收客户端消息，减少系统资源浪费，使软件轻量化

    def TCPClientConcurrency(self):
        while True:
            recv_msg = self.s.recv(1024)
            if recv_msg:
                msg = recv_msg.decode('utf-8')
                msg = '来自IP:{}端口:{}:\n{}\n'.format(self.host, self.port, msg)
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
            else:
                self.s.close()
                msg = '从服务器断开连接\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)
                break

    def TCPSend(self):

        if self.link is False:
            msg = '请选择服务，并点击连接网络\n'
            self.AllText.moveCursor(QTextCursor.End)
            self.AllText.insertPlainText(msg)
        else:
            try:
                send_msg = (str(self.SendText.toPlainText())).encode('utf-8')
                if self.State == 0:
                    # 向所有连接的客户端发送消息
                    for client, address in self.ClientSocketList:
                        client.send(send_msg)
                    msg = 'TCP服务端已发送\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
                    self.SendText.clear()
                if self.State == 1:
                    self.s.send(send_msg)
                    msg = 'TCP客户端已发送\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
                    self.SendText.clear()
            except Exception as ret:
                msg = '发送失败\n'
                self.AllText.moveCursor(QTextCursor.End)
                self.AllText.insertPlainText(msg)

    def TCPClose(self):
        if self.State == 0:
            try:
                for client, address in self.ClientSocketList:
                    client.close()
                self.s.close()
                if self.link is True:
                    msg = '已断开网络\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
            except Exception as ret:
                pass
        if self.State == 1:
            try:
                self.s.close()
                if self.link is True:
                    msg = '已断开网络\n'
                    self.AllText.moveCursor(QTextCursor.End)
                    self.AllText.insertPlainText(msg)
            except Exception as ret:
                pass
        try:
            threading.Thread._Thread__stop(self.sever_th)
        except Exception:
            pass
        try:
            threading.Thread._Thread__stop(self.client_th)
        except Exception:
            pass
